Terminals unused in grammar

   TOK_INDEX
   TOK_RETURNVOID
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_NEWSTRING
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ORD
   TOK_CHR
   TOK_ROOT
   TOK_DECLID
   TOK_FUNCTION
   TOK_PROTOTYPE
   TOK_PARAMLIST
   TOK_VARDECL


State 52 conflicts: 2 shift/reduce
State 53 conflicts: 2 shift/reduce
State 54 conflicts: 2 shift/reduce
State 98 conflicts: 2 shift/reduce
State 99 conflicts: 2 shift/reduce
State 100 conflicts: 2 shift/reduce
State 101 conflicts: 2 shift/reduce
State 102 conflicts: 2 shift/reduce
State 103 conflicts: 2 shift/reduce
State 104 conflicts: 2 shift/reduce
State 105 conflicts: 2 shift/reduce
State 106 conflicts: 2 shift/reduce
State 107 conflicts: 2 shift/reduce
State 108 conflicts: 2 shift/reduce
State 109 conflicts: 2 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | %empty

    8 structdef: TOK_STRUCT TOK_IDENT '{' fielddecls '}'
    9          | TOK_STRUCT TOK_IDENT '{' '}'

   10 fielddecls: fielddecls fielddecl
   11           | fielddecl

   12 fielddecl: basetype TOK_IDENT ';'
   13          | basetype TOK_ARRAY TOK_IDENT ';'

   14 basetype: TOK_VOID
   15         | TOK_INT
   16         | TOK_STRING
   17         | TOK_IDENT

   18 function: identdecl idendecls ')' block

   19 idendecls: idendecls ',' identdecl
   20          | '(' identdecl
   21          | '('

   22 identdecl: basetype TOK_IDENT
   23          | basetype TOK_ARRAY TOK_IDENT

   24 block: '{' '}'
   25      | statements '}'
   26      | ';'

   27 statements: statements statement
   28           | '{' statement

   29 statement: block
   30          | vardecl
   31          | while
   32          | ifelse
   33          | return
   34          | expr ';'

   35 vardecl: identdecl '=' expr ';'

   36 while: TOK_WHILE '(' expr ')' statement

   37 ifelse: TOK_IF '(' expr ')' statement
   38       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   39 return: TOK_RETURN ';'
   40       | TOK_RETURN expr ';'

   41 exprs: expr ',' exprs
   42      | expr

   43 expr: expr '-' expr
   44     | expr '+' expr
   45     | expr '/' expr
   46     | expr '*' expr
   47     | expr '%' expr
   48     | expr '=' expr
   49     | expr TOK_EQ expr
   50     | expr TOK_NE expr
   51     | expr TOK_LT expr
   52     | expr TOK_LE expr
   53     | expr TOK_GT expr
   54     | expr TOK_GE expr
   55     | '-' expr
   56     | '+' expr
   57     | '!' expr
   58     | '(' expr ')'
   59     | allocator
   60     | call
   61     | variable
   62     | constant

   63 allocator: TOK_NEW TOK_IDENT '(' ')'
   64          | TOK_NEW TOK_STRING '(' expr ')'
   65          | TOK_NEW basetype '[' expr ']'

   66 call: TOK_IDENT '(' ')'
   67     | TOK_IDENT '(' exprs ')'

   68 variable: TOK_IDENT
   69         | expr '[' expr ']'
   70         | expr '.' TOK_IDENT

   71 constant: TOK_INTCON
   72         | TOK_CHARCON
   73         | TOK_STRINGCON
   74         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 57
'%' (37) 47
'(' (40) 20 21 36 37 38 58 63 64 66 67
')' (41) 18 36 37 38 58 63 64 66 67
'*' (42) 46
'+' (43) 44 56
',' (44) 19 41
'-' (45) 43 55
'.' (46) 70
'/' (47) 45
';' (59) 6 12 13 26 34 35 39 40
'=' (61) 35 48
'[' (91) 65 69
']' (93) 65 69
'{' (123) 8 9 24 28
'}' (125) 5 8 9 24 25
error (256) 5 6
TOK_VOID (258) 14
TOK_INT (259) 15
TOK_STRING (260) 16 64
TOK_INDEX (261)
TOK_IF (262) 37 38
TOK_ELSE (263) 38
TOK_WHILE (264) 36
TOK_RETURN (265) 39 40
TOK_STRUCT (266) 8 9
TOK_NULL (267) 74
TOK_NEW (268) 63 64 65
TOK_ARRAY (269) 13 23
TOK_RETURNVOID (270)
TOK_EQ (271) 49
TOK_NE (272) 50
TOK_LT (273) 51
TOK_LE (274) 52
TOK_GT (275) 53
TOK_GE (276) 54
TOK_IDENT (277) 8 9 12 13 17 22 23 63 66 67 68 70
TOK_INTCON (278) 71
TOK_CHARCON (279) 72
TOK_STRINGCON (280) 73
TOK_BLOCK (281)
TOK_CALL (282)
TOK_IFELSE (283)
TOK_INITDECL (284)
TOK_NEWSTRING (285)
TOK_POS (286)
TOK_NEG (287)
TOK_NEWARRAY (288)
TOK_TYPEID (289)
TOK_FIELD (290)
TOK_ORD (291)
TOK_CHR (292)
TOK_ROOT (293)
TOK_DECLID (294)
TOK_FUNCTION (295)
TOK_PROTOTYPE (296)
TOK_PARAMLIST (297)
TOK_VARDECL (298)


Nonterminals, with rules where they appear

$accept (60)
    on left: 0
start (61)
    on left: 1, on right: 0
program (62)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (63)
    on left: 8 9, on right: 2
fielddecls (64)
    on left: 10 11, on right: 8 10
fielddecl (65)
    on left: 12 13, on right: 10 11
basetype (66)
    on left: 14 15 16 17, on right: 12 13 22 23 65
function (67)
    on left: 18, on right: 3
idendecls (68)
    on left: 19 20 21, on right: 18 19
identdecl (69)
    on left: 22 23, on right: 18 19 20 35
block (70)
    on left: 24 25 26, on right: 18 29
statements (71)
    on left: 27 28, on right: 25 27
statement (72)
    on left: 29 30 31 32 33 34, on right: 4 27 28 36 37 38
vardecl (73)
    on left: 35, on right: 30
while (74)
    on left: 36, on right: 31
ifelse (75)
    on left: 37 38, on right: 32
return (76)
    on left: 39 40, on right: 33
exprs (77)
    on left: 41 42, on right: 41 67
expr (78)
    on left: 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
    61 62, on right: 34 35 36 37 38 40 41 42 43 44 45 46 47 48 49 50
    51 52 53 54 55 56 57 58 64 65 69 70
allocator (79)
    on left: 63 64 65, on right: 59
call (80)
    on left: 66 67, on right: 60
variable (81)
    on left: 68 69 70, on right: 61
constant (82)
    on left: 71 72 73 74, on right: 62


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_STRUCT     shift, and go to state 11
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    ';'            shift, and go to state 21
    '{'            shift, and go to state 22
    '('            shift, and go to state 23

    $end  reduce using rule 1 (start)

    structdef   go to state 24
    basetype    go to state 25
    function    go to state 26
    identdecl   go to state 27
    block       go to state 28
    statements  go to state 29
    statement   go to state 30
    vardecl     go to state 31
    while       go to state 32
    ifelse      go to state 33
    return      go to state 34
    expr        go to state 35
    allocator   go to state 36
    call        go to state 37
    variable    go to state 38
    constant    go to state 39


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 40
    ';'  shift, and go to state 41


State 5

   14 basetype: TOK_VOID .

    $default  reduce using rule 14 (basetype)


State 6

   15 basetype: TOK_INT .

    $default  reduce using rule 15 (basetype)


State 7

   16 basetype: TOK_STRING .

    $default  reduce using rule 16 (basetype)


State 8

   37 ifelse: TOK_IF . '(' expr ')' statement
   38       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 42


State 9

   36 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 43


State 10

   39 return: TOK_RETURN . ';'
   40       | TOK_RETURN . expr ';'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    ';'            shift, and go to state 45
    '('            shift, and go to state 23

    expr       go to state 46
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 11

    8 structdef: TOK_STRUCT . TOK_IDENT '{' fielddecls '}'
    9          | TOK_STRUCT . TOK_IDENT '{' '}'

    TOK_IDENT  shift, and go to state 47


State 12

   74 constant: TOK_NULL .

    $default  reduce using rule 74 (constant)


State 13

   63 allocator: TOK_NEW . TOK_IDENT '(' ')'
   64          | TOK_NEW . TOK_STRING '(' expr ')'
   65          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 48
    TOK_IDENT   shift, and go to state 49

    basetype  go to state 50


State 14

   17 basetype: TOK_IDENT .
   66 call: TOK_IDENT . '(' ')'
   67     | TOK_IDENT . '(' exprs ')'
   68 variable: TOK_IDENT .

    '('  shift, and go to state 51

    TOK_ARRAY  reduce using rule 17 (basetype)
    TOK_IDENT  reduce using rule 17 (basetype)
    $default   reduce using rule 68 (variable)


State 15

   71 constant: TOK_INTCON .

    $default  reduce using rule 71 (constant)


State 16

   72 constant: TOK_CHARCON .

    $default  reduce using rule 72 (constant)


State 17

   73 constant: TOK_STRINGCON .

    $default  reduce using rule 73 (constant)


State 18

   56 expr: '+' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 52
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 19

   55 expr: '-' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 53
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 20

   57 expr: '!' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 54
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 21

   26 block: ';' .

    $default  reduce using rule 26 (block)


State 22

   24 block: '{' . '}'
   28 statements: '{' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '}'            shift, and go to state 55
    ';'            shift, and go to state 21
    '{'            shift, and go to state 22
    '('            shift, and go to state 23

    basetype    go to state 25
    identdecl   go to state 56
    block       go to state 28
    statements  go to state 29
    statement   go to state 57
    vardecl     go to state 31
    while       go to state 32
    ifelse      go to state 33
    return      go to state 34
    expr        go to state 35
    allocator   go to state 36
    call        go to state 37
    variable    go to state 38
    constant    go to state 39


State 23

   58 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 58
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 24

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 25

   22 identdecl: basetype . TOK_IDENT
   23          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 59
    TOK_IDENT  shift, and go to state 60


State 26

    3 program: program function .

    $default  reduce using rule 3 (program)


State 27

   18 function: identdecl . idendecls ')' block
   35 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 61
    '('  shift, and go to state 62

    idendecls  go to state 63


State 28

   29 statement: block .

    $default  reduce using rule 29 (statement)


State 29

   25 block: statements . '}'
   27 statements: statements . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '}'            shift, and go to state 64
    ';'            shift, and go to state 21
    '{'            shift, and go to state 22
    '('            shift, and go to state 23

    basetype    go to state 25
    identdecl   go to state 56
    block       go to state 28
    statements  go to state 29
    statement   go to state 65
    vardecl     go to state 31
    while       go to state 32
    ifelse      go to state 33
    return      go to state 34
    expr        go to state 35
    allocator   go to state 36
    call        go to state 37
    variable    go to state 38
    constant    go to state 39


State 30

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 31

   30 statement: vardecl .

    $default  reduce using rule 30 (statement)


State 32

   31 statement: while .

    $default  reduce using rule 31 (statement)


State 33

   32 statement: ifelse .

    $default  reduce using rule 32 (statement)


State 34

   33 statement: return .

    $default  reduce using rule 33 (statement)


State 35

   34 statement: expr . ';'
   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    ';'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80


State 36

   59 expr: allocator .

    $default  reduce using rule 59 (expr)


State 37

   60 expr: call .

    $default  reduce using rule 60 (expr)


State 38

   61 expr: variable .

    $default  reduce using rule 61 (expr)


State 39

   62 expr: constant .

    $default  reduce using rule 62 (expr)


State 40

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 41

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 42

   37 ifelse: TOK_IF '(' . expr ')' statement
   38       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 81
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 43

   36 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 82
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 44

   66 call: TOK_IDENT . '(' ')'
   67     | TOK_IDENT . '(' exprs ')'
   68 variable: TOK_IDENT .

    '('  shift, and go to state 51

    $default  reduce using rule 68 (variable)


State 45

   39 return: TOK_RETURN ';' .

    $default  reduce using rule 39 (return)


State 46

   40 return: TOK_RETURN expr . ';'
   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    ';'     shift, and go to state 83
    '['     shift, and go to state 79
    '.'     shift, and go to state 80


State 47

    8 structdef: TOK_STRUCT TOK_IDENT . '{' fielddecls '}'
    9          | TOK_STRUCT TOK_IDENT . '{' '}'

    '{'  shift, and go to state 84


State 48

   16 basetype: TOK_STRING .
   64 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 85

    $default  reduce using rule 16 (basetype)


State 49

   17 basetype: TOK_IDENT .
   63 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 86

    $default  reduce using rule 17 (basetype)


State 50

   65 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 87


State 51

   66 call: TOK_IDENT '(' . ')'
   67     | TOK_IDENT '(' . exprs ')'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    ')'            shift, and go to state 88
    '('            shift, and go to state 23

    exprs      go to state 89
    expr       go to state 90
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 52

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   56     | '+' expr .
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    '['       [reduce using rule 56 (expr)]
    '.'       [reduce using rule 56 (expr)]
    $default  reduce using rule 56 (expr)


State 53

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | '-' expr .
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    '['       [reduce using rule 55 (expr)]
    '.'       [reduce using rule 55 (expr)]
    $default  reduce using rule 55 (expr)


State 54

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   57     | '!' expr .
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    '['       [reduce using rule 57 (expr)]
    '.'       [reduce using rule 57 (expr)]
    $default  reduce using rule 57 (expr)


State 55

   24 block: '{' '}' .

    $default  reduce using rule 24 (block)


State 56

   35 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 61


State 57

   28 statements: '{' statement .

    $default  reduce using rule 28 (statements)


State 58

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   58     | '(' expr . ')'
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    ')'     shift, and go to state 91
    '['     shift, and go to state 79
    '.'     shift, and go to state 80


State 59

   23 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 92


State 60

   22 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 22 (identdecl)


State 61

   35 vardecl: identdecl '=' . expr ';'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 93
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 62

   20 idendecls: '(' . identdecl
   21          | '(' .

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 94

    $default  reduce using rule 21 (idendecls)

    basetype   go to state 25
    identdecl  go to state 95


State 63

   18 function: identdecl idendecls . ')' block
   19 idendecls: idendecls . ',' identdecl

    ')'  shift, and go to state 96
    ','  shift, and go to state 97


State 64

   25 block: statements '}' .

    $default  reduce using rule 25 (block)


State 65

   27 statements: statements statement .

    $default  reduce using rule 27 (statements)


State 66

   49 expr: expr TOK_EQ . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 98
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 67

   50 expr: expr TOK_NE . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 99
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 68

   51 expr: expr TOK_LT . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 100
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 69

   52 expr: expr TOK_LE . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 101
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 70

   53 expr: expr TOK_GT . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 102
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 71

   54 expr: expr TOK_GE . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 103
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 72

   48 expr: expr '=' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 104
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 73

   44 expr: expr '+' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 105
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 74

   43 expr: expr '-' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 106
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 75

   46 expr: expr '*' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 107
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 76

   45 expr: expr '/' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 108
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 77

   47 expr: expr '%' . expr

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 109
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 78

   34 statement: expr ';' .

    $default  reduce using rule 34 (statement)


State 79

   69 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 110
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 80

   70 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 111


State 81

   37 ifelse: TOK_IF '(' expr . ')' statement
   38       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    ')'     shift, and go to state 112
    '['     shift, and go to state 79
    '.'     shift, and go to state 80


State 82

   36 while: TOK_WHILE '(' expr . ')' statement
   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    ')'     shift, and go to state 113
    '['     shift, and go to state 79
    '.'     shift, and go to state 80


State 83

   40 return: TOK_RETURN expr ';' .

    $default  reduce using rule 40 (return)


State 84

    8 structdef: TOK_STRUCT TOK_IDENT '{' . fielddecls '}'
    9          | TOK_STRUCT TOK_IDENT '{' . '}'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 94
    '}'         shift, and go to state 114

    fielddecls  go to state 115
    fielddecl   go to state 116
    basetype    go to state 117


State 85

   64 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 118
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 86

   63 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 119


State 87

   65 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    expr       go to state 120
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 88

   66 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 66 (call)


State 89

   67 call: TOK_IDENT '(' exprs . ')'

    ')'  shift, and go to state 121


State 90

   41 exprs: expr . ',' exprs
   42      | expr .
   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    ','     shift, and go to state 122
    '['     shift, and go to state 79
    '.'     shift, and go to state 80

    $default  reduce using rule 42 (exprs)


State 91

   58 expr: '(' expr ')' .

    $default  reduce using rule 58 (expr)


State 92

   23 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 23 (identdecl)


State 93

   35 vardecl: identdecl '=' expr . ';'
   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    ';'     shift, and go to state 123
    '['     shift, and go to state 79
    '.'     shift, and go to state 80


State 94

   17 basetype: TOK_IDENT .

    $default  reduce using rule 17 (basetype)


State 95

   20 idendecls: '(' identdecl .

    $default  reduce using rule 20 (idendecls)


State 96

   18 function: identdecl idendecls ')' . block

    ';'  shift, and go to state 21
    '{'  shift, and go to state 22

    block       go to state 124
    statements  go to state 29


State 97

   19 idendecls: idendecls ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 94

    basetype   go to state 25
    identdecl  go to state 125


State 98

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   49     | expr TOK_EQ expr .
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 73
    '-'  shift, and go to state 74
    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    '['       [reduce using rule 49 (expr)]
    '.'       [reduce using rule 49 (expr)]
    $default  reduce using rule 49 (expr)


State 99

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   50     | expr TOK_NE expr .
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 73
    '-'  shift, and go to state 74
    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    '['       [reduce using rule 50 (expr)]
    '.'       [reduce using rule 50 (expr)]
    $default  reduce using rule 50 (expr)


State 100

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   51     | expr TOK_LT expr .
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 73
    '-'  shift, and go to state 74
    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    '['       [reduce using rule 51 (expr)]
    '.'       [reduce using rule 51 (expr)]
    $default  reduce using rule 51 (expr)


State 101

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   52     | expr TOK_LE expr .
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 73
    '-'  shift, and go to state 74
    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    '['       [reduce using rule 52 (expr)]
    '.'       [reduce using rule 52 (expr)]
    $default  reduce using rule 52 (expr)


State 102

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   53     | expr TOK_GT expr .
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 73
    '-'  shift, and go to state 74
    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    '['       [reduce using rule 53 (expr)]
    '.'       [reduce using rule 53 (expr)]
    $default  reduce using rule 53 (expr)


State 103

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   54     | expr TOK_GE expr .
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 73
    '-'  shift, and go to state 74
    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    '['       [reduce using rule 54 (expr)]
    '.'       [reduce using rule 54 (expr)]
    $default  reduce using rule 54 (expr)


State 104

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   48     | expr '=' expr .
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    '['     shift, and go to state 79
    '.'     shift, and go to state 80

    '['       [reduce using rule 48 (expr)]
    '.'       [reduce using rule 48 (expr)]
    $default  reduce using rule 48 (expr)


State 105

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   44     | expr '+' expr .
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    '['       [reduce using rule 44 (expr)]
    '.'       [reduce using rule 44 (expr)]
    $default  reduce using rule 44 (expr)


State 106

   43 expr: expr . '-' expr
   43     | expr '-' expr .
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 75
    '/'  shift, and go to state 76
    '%'  shift, and go to state 77
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    '['       [reduce using rule 43 (expr)]
    '.'       [reduce using rule 43 (expr)]
    $default  reduce using rule 43 (expr)


State 107

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   46     | expr '*' expr .
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    '['       [reduce using rule 46 (expr)]
    '.'       [reduce using rule 46 (expr)]
    $default  reduce using rule 46 (expr)


State 108

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   45     | expr '/' expr .
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    '['       [reduce using rule 45 (expr)]
    '.'       [reduce using rule 45 (expr)]
    $default  reduce using rule 45 (expr)


State 109

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   47     | expr '%' expr .
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    '['       [reduce using rule 47 (expr)]
    '.'       [reduce using rule 47 (expr)]
    $default  reduce using rule 47 (expr)


State 110

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   69 variable: expr . '[' expr ']'
   69         | expr '[' expr . ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    '['     shift, and go to state 79
    ']'     shift, and go to state 126
    '.'     shift, and go to state 80


State 111

   70 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 70 (variable)


State 112

   37 ifelse: TOK_IF '(' expr ')' . statement
   38       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    ';'            shift, and go to state 21
    '{'            shift, and go to state 22
    '('            shift, and go to state 23

    basetype    go to state 25
    identdecl   go to state 56
    block       go to state 28
    statements  go to state 29
    statement   go to state 127
    vardecl     go to state 31
    while       go to state 32
    ifelse      go to state 33
    return      go to state 34
    expr        go to state 35
    allocator   go to state 36
    call        go to state 37
    variable    go to state 38
    constant    go to state 39


State 113

   36 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    ';'            shift, and go to state 21
    '{'            shift, and go to state 22
    '('            shift, and go to state 23

    basetype    go to state 25
    identdecl   go to state 56
    block       go to state 28
    statements  go to state 29
    statement   go to state 128
    vardecl     go to state 31
    while       go to state 32
    ifelse      go to state 33
    return      go to state 34
    expr        go to state 35
    allocator   go to state 36
    call        go to state 37
    variable    go to state 38
    constant    go to state 39


State 114

    9 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 9 (structdef)


State 115

    8 structdef: TOK_STRUCT TOK_IDENT '{' fielddecls . '}'
   10 fielddecls: fielddecls . fielddecl

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_IDENT   shift, and go to state 94
    '}'         shift, and go to state 129

    fielddecl  go to state 130
    basetype   go to state 117


State 116

   11 fielddecls: fielddecl .

    $default  reduce using rule 11 (fielddecls)


State 117

   12 fielddecl: basetype . TOK_IDENT ';'
   13          | basetype . TOK_ARRAY TOK_IDENT ';'

    TOK_ARRAY  shift, and go to state 131
    TOK_IDENT  shift, and go to state 132


State 118

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   64 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    ')'     shift, and go to state 133
    '['     shift, and go to state 79
    '.'     shift, and go to state 80


State 119

   63 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 63 (allocator)


State 120

   43 expr: expr . '-' expr
   44     | expr . '+' expr
   45     | expr . '/' expr
   46     | expr . '*' expr
   47     | expr . '%' expr
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   65 allocator: TOK_NEW basetype '[' expr . ']'
   69 variable: expr . '[' expr ']'
   70         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 66
    TOK_NE  shift, and go to state 67
    TOK_LT  shift, and go to state 68
    TOK_LE  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    '='     shift, and go to state 72
    '+'     shift, and go to state 73
    '-'     shift, and go to state 74
    '*'     shift, and go to state 75
    '/'     shift, and go to state 76
    '%'     shift, and go to state 77
    '['     shift, and go to state 79
    ']'     shift, and go to state 134
    '.'     shift, and go to state 80


State 121

   67 call: TOK_IDENT '(' exprs ')' .

    $default  reduce using rule 67 (call)


State 122

   41 exprs: expr ',' . exprs

    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 44
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    '('            shift, and go to state 23

    exprs      go to state 135
    expr       go to state 90
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 123

   35 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 35 (vardecl)


State 124

   18 function: identdecl idendecls ')' block .

    $default  reduce using rule 18 (function)


State 125

   19 idendecls: idendecls ',' identdecl .

    $default  reduce using rule 19 (idendecls)


State 126

   69 variable: expr '[' expr ']' .

    $default  reduce using rule 69 (variable)


State 127

   37 ifelse: TOK_IF '(' expr ')' statement .
   38       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 136

    $default  reduce using rule 37 (ifelse)


State 128

   36 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 36 (while)


State 129

    8 structdef: TOK_STRUCT TOK_IDENT '{' fielddecls '}' .

    $default  reduce using rule 8 (structdef)


State 130

   10 fielddecls: fielddecls fielddecl .

    $default  reduce using rule 10 (fielddecls)


State 131

   13 fielddecl: basetype TOK_ARRAY . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 137


State 132

   12 fielddecl: basetype TOK_IDENT . ';'

    ';'  shift, and go to state 138


State 133

   64 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 64 (allocator)


State 134

   65 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 65 (allocator)


State 135

   41 exprs: expr ',' exprs .

    $default  reduce using rule 41 (exprs)


State 136

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULL       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_IDENT      shift, and go to state 14
    TOK_INTCON     shift, and go to state 15
    TOK_CHARCON    shift, and go to state 16
    TOK_STRINGCON  shift, and go to state 17
    '+'            shift, and go to state 18
    '-'            shift, and go to state 19
    '!'            shift, and go to state 20
    ';'            shift, and go to state 21
    '{'            shift, and go to state 22
    '('            shift, and go to state 23

    basetype    go to state 25
    identdecl   go to state 56
    block       go to state 28
    statements  go to state 29
    statement   go to state 139
    vardecl     go to state 31
    while       go to state 32
    ifelse      go to state 33
    return      go to state 34
    expr        go to state 35
    allocator   go to state 36
    call        go to state 37
    variable    go to state 38
    constant    go to state 39


State 137

   13 fielddecl: basetype TOK_ARRAY TOK_IDENT . ';'

    ';'  shift, and go to state 140


State 138

   12 fielddecl: basetype TOK_IDENT ';' .

    $default  reduce using rule 12 (fielddecl)


State 139

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 38 (ifelse)


State 140

   13 fielddecl: basetype TOK_ARRAY TOK_IDENT ';' .

    $default  reduce using rule 13 (fielddecl)
